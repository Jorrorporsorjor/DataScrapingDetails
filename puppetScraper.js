const puppeteer = require('puppeteer');
const fs = require('fs');

const randomDelay = (min, max) => { 
  return new Promise(resolve => setTimeout(resolve, Math.random() * (max - min) + min));
};

const humanScroll = async (page) => {
  await page.evaluate(async () => {
    await new Promise((resolve) => {
      let totalHeight = 0;
      const distance = Math.floor(Math.random() * 100) + 100; 
      const timer = setInterval(() => {
        const scrollHeight = document.body.scrollHeight;
        window.scrollBy(0, distance);
        totalHeight += distance;
        
        if (totalHeight >= scrollHeight - window.innerHeight) {
          clearInterval(timer);
          resolve();
        }
      }, Math.floor(Math.random() * 50) + 50); 
    });
  });
};

const randomMouseMovement = async (page) => {
  const width = page.viewport().width;
  const height = page.viewport().height;
  
  const x = Math.floor(Math.random() * width);
  const y = Math.floor(Math.random() * height);
  
  await page.mouse.move(x, y, { steps: Math.floor(Math.random() * 10) + 5 });
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
const extractPhoneNumbers = (text) => {
  const phonePatterns = [
    /(\+66|0)?[\s-]?[689]\d{1}[\s-]?\d{3}[\s-]?\d{4}/g, // 08x-xxx-xxxx, 09x-xxx-xxxx
    /(\+66|0)?[\s-]?[2-9]\d{1}[\s-]?\d{3}[\s-]?\d{4}/g, // ‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ö‡πâ‡∏≤‡∏ô 02-xxx-xxxx
    /\d{3}[-\s]?\d{3}[-\s]?\d{4}/g, // xxx-xxx-xxxx
    /\d{2}[-\s]?\d{3}[-\s]?\d{4}/g, // xx-xxx-xxxx
  ];
  
  let phones = [];
  phonePatterns.forEach(pattern => {
    const matches = text.match(pattern) || [];
    phones = phones.concat(matches);
  });
  
  // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  phones = phones.map(phone => {
    return phone.replace(/[\s-]/g, ''); // ‡∏•‡∏ö‡∏ä‡πà‡∏≠‡∏á‡∏ß‡πà‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏Ç‡∏µ‡∏î
  }).filter(phone => {
    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ 9-10 ‡∏´‡∏•‡∏±‡∏Å
    const digitOnly = phone.replace(/\+66/, '0');
    return digitOnly.length >= 9 && digitOnly.length <= 10;
  });
  
  return [...new Set(phones)]; // ‡∏•‡∏ö‡πÄ‡∏ö‡∏≠‡∏£‡πå‡∏ã‡πâ‡∏≥
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á LINE ID ‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
const extractLineIds = (text) => {
  const linePatterns = [
    /(?:line|‡πÑ‡∏•‡∏ô‡πå|line\s*id|id|‡πÑ‡∏≠‡∏î‡∏µ)[\s:]*[@]?([a-zA-Z0-9._-]+)/gi,
    /@([a-zA-Z0-9._-]+)/g, // @username
    /id[\s:]*([a-zA-Z0-9._-]+)/gi,
  ];
  
  let lineIds = [];
  linePatterns.forEach(pattern => {
    const matches = [...text.matchAll(pattern)];
    lineIds = lineIds.concat(matches.map(m => m[1]));
  });
  
  // ‡∏Å‡∏£‡∏≠‡∏á LINE ID ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á
  lineIds = lineIds.filter(id => {
    if (!id) return false;
    // ‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏¢‡∏≤‡∏ß 4-30 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
    if (id.length < 4 || id.length > 30) return false;
    // ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏Ñ‡∏≥‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ
    const commonWords = ['line', 'chat', 'contact', 'inbox', 'message', '‡πÑ‡∏•‡∏ô‡πå'];
    if (commonWords.includes(id.toLowerCase())) return false;
    // ‡πÑ‡∏°‡πà‡πÄ‡∏≠‡∏≤‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£
    if (/^\d{9,10}$/.test(id)) return false;
    return true;
  });
  
  return [...new Set(lineIds)];
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏£‡∏≤‡∏Ñ‡∏≤‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
const extractPrices = (text) => {
  const pricePatterns = [
    /(\d{1,3}(?:,\d{3})*|\d+)[\s]*(?:‡∏ö‡∏≤‡∏ó|‡∏ø|baht|‡∏ö\.)/gi,
    /(?:‡∏£‡∏≤‡∏Ñ‡∏≤|price|‡∏Ç‡∏≤‡∏¢)[\s:]*(\d{1,3}(?:,\d{3})*|\d+)/gi,
    /(\d{1,3}(?:,\d{3})*|\d+)[\s]*(?:-|‡∏ö‡∏≤‡∏ó)/gi,
  ];
  
  let prices = [];
  pricePatterns.forEach(pattern => {
    const matches = [...text.matchAll(pattern)];
    prices = prices.concat(matches.map(m => m[1]));
  });
  
  // ‡πÅ‡∏õ‡∏•‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÅ‡∏•‡∏∞‡∏Å‡∏£‡∏≠‡∏á
  prices = prices.map(price => {
    const numPrice = parseInt(price.replace(/,/g, ''));
    return numPrice;
  }).filter(price => {
    // ‡∏Å‡∏£‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏≤‡∏Ñ‡∏≤‡∏ó‡∏µ‡πà‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏• (50-100,000 ‡∏ö‡∏≤‡∏ó)
    return price >= 50 && price <= 100000;
  });
  
  return [...new Set(prices)];
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
const extractBeerBrands = (text) => {
  const brands = [
    '‡∏™‡∏¥‡∏á‡∏´‡πå', '‡∏ä‡πâ‡∏≤‡∏á', '‡∏•‡∏µ‡πÇ‡∏≠', 'leo', 'heineken', '‡πÑ‡∏Æ‡πÄ‡∏ô‡πÄ‡∏Å‡πâ‡∏ô', 'corona', '‡πÇ‡∏Ñ‡πÇ‡∏£‡∏ô‡∏≤',
    '‡∏´‡∏°‡∏µ‡∏Ç‡∏≤‡∏ß', 'carlsberg', '‡∏Ñ‡∏≤‡∏£‡πå‡∏•‡∏™‡πå‡πÄ‡∏ö‡∏¥‡∏£‡πå‡∏Å', 'tiger', '‡πÑ‡∏ó‡πÄ‡∏Å‡∏≠‡∏£‡πå', 'asahi', '‡∏≠‡∏≤‡∏ã‡∏≤‡∏Æ‡∏µ',
    'budweiser', '‡∏ö‡∏±‡∏î‡πÑ‡∏ß‡πÄ‡∏ã‡∏≠‡∏£‡πå', 'hoegaarden', '‡πÄ‡∏Æ‡∏≠‡∏Å‡∏≤‡∏£‡πå‡πÄ‡∏î‡∏ô', 'stella', '‡∏™‡πÄ‡∏ï‡∏•‡∏•‡πà‡∏≤',
    'guinness', '‡∏Å‡∏¥‡∏ô‡πÄ‡∏ô‡∏™', 'peroni', '‡πÄ‡∏õ‡πÇ‡∏£‡∏ô‡∏µ', 'san miguel', '‡∏ã‡∏≤‡∏ô‡∏°‡∏¥‡πÄ‡∏Å‡∏•',
    'tsingtao', '‡∏ä‡∏¥‡∏á‡πÄ‡∏ï‡πà‡∏≤', 'kirin', '‡∏Ñ‡∏¥‡∏£‡∏¥‡∏ô', 'sapporo', '‡∏ã‡∏±‡∏õ‡πÇ‡∏õ‡πÇ‡∏£',
    'erdinger', '‡πÄ‡∏≠‡∏≠‡∏î‡∏¥‡∏á‡πÄ‡∏á‡∏≠‡∏£‡πå', 'paulaner', '‡πÄ‡∏õ‡∏≤‡∏•‡∏≤‡πÄ‡∏ô‡∏≠‡∏£‡πå', 'franziskaner', '‡∏ü‡∏£‡∏≤‡∏ô‡∏ã‡∏¥‡∏™‡∏Å‡∏≤‡πÄ‡∏ô‡∏≠‡∏£‡πå'
  ];
  
  const lowerText = text.toLowerCase();
  const foundBrands = [];
  
  brands.forEach(brand => {
    if (lowerText.includes(brand.toLowerCase())) {
      // ‡πÄ‡∏≠‡∏≤‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏ó‡∏µ‡πà‡∏≠‡πà‡∏≤‡∏ô‡∏á‡πà‡∏≤‡∏¢
      if (brand === 'leo' || brand === 'tiger' || brand === 'asahi' || 
          brand === 'heineken' || brand === 'corona' || brand === 'budweiser') {
        foundBrands.push(brand.charAt(0).toUpperCase() + brand.slice(1));
      } else {
        foundBrands.push(brand);
      }
    }
  });
  
  return [...new Set(foundBrands)];
};

// ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡πÅ‡∏ö‡∏ö‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á
const extractLocations = (text) => {
  const provinces = [
    '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û', '‡∏Å‡∏ó‡∏°', '‡∏Å‡∏£‡∏∏‡∏á‡πÄ‡∏ó‡∏û‡∏°‡∏´‡∏≤‡∏ô‡∏Ñ‡∏£', 'bangkok',
    '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏õ‡∏£‡∏≤‡∏Å‡∏≤‡∏£', '‡∏ô‡∏ô‡∏ó‡∏ö‡∏∏‡∏£‡∏µ', '‡∏õ‡∏ó‡∏∏‡∏°‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏™‡∏°‡∏∏‡∏ó‡∏£‡∏™‡∏≤‡∏Ñ‡∏£', '‡∏ô‡∏Ñ‡∏£‡∏õ‡∏ê‡∏°',
    '‡∏ä‡∏•‡∏ö‡∏∏‡∏£‡∏µ', '‡∏û‡∏±‡∏ó‡∏¢‡∏≤', '‡∏£‡∏∞‡∏¢‡∏≠‡∏á', '‡∏â‡∏∞‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏£‡∏≤', '‡∏™‡∏£‡∏∞‡πÅ‡∏Å‡πâ‡∏ß',
    '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà', '‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡∏£‡∏≤‡∏¢', '‡∏•‡∏≥‡∏õ‡∏≤‡∏á', '‡∏•‡∏≥‡∏û‡∏π‡∏ô', '‡πÅ‡∏°‡πà‡∏Æ‡πà‡∏≠‡∏á‡∏™‡∏≠‡∏ô',
    '‡∏†‡∏π‡πÄ‡∏Å‡πá‡∏ï', '‡∏Å‡∏£‡∏∞‡∏ö‡∏µ‡πà', '‡∏û‡∏±‡∏á‡∏á‡∏≤', '‡∏™‡∏∏‡∏£‡∏≤‡∏©‡∏é‡∏£‡πå‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏ò‡∏£‡∏£‡∏°‡∏£‡∏≤‡∏ä',
    '‡∏Ç‡∏≠‡∏ô‡πÅ‡∏Å‡πà‡∏ô', '‡∏≠‡∏∏‡∏î‡∏£‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏≠‡∏∏‡∏ö‡∏•‡∏£‡∏≤‡∏ä‡∏ò‡∏≤‡∏ô‡∏µ', '‡∏ô‡∏Ñ‡∏£‡∏£‡∏≤‡∏ä‡∏™‡∏µ‡∏°‡∏≤', '‡πÇ‡∏Ñ‡∏£‡∏≤‡∏ä',
    '‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏û‡∏£‡∏∞‡∏ô‡∏Ñ‡∏£‡∏®‡∏£‡∏µ‡∏≠‡∏¢‡∏∏‡∏ò‡∏¢‡∏≤', '‡∏•‡∏û‡∏ö‡∏∏‡∏£‡∏µ', '‡∏™‡∏¥‡∏á‡∏´‡πå‡∏ö‡∏∏‡∏£‡∏µ', '‡∏≠‡πà‡∏≤‡∏á‡∏ó‡∏≠‡∏á',
    '‡∏´‡∏≤‡∏î‡πÉ‡∏´‡∏ç‡πà', '‡∏™‡∏á‡∏Ç‡∏•‡∏≤', '‡∏õ‡∏±‡∏ï‡∏ï‡∏≤‡∏ô‡∏µ', '‡∏¢‡∏∞‡∏•‡∏≤', '‡∏ô‡∏£‡∏≤‡∏ò‡∏¥‡∏ß‡∏≤‡∏™'
  ];
  
  const foundLocations = [];
  provinces.forEach(province => {
    if (text.includes(province)) {
      foundLocations.push(province);
    }
  });
  
  // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏≠‡∏≥‡πÄ‡∏†‡∏≠/‡∏ï‡∏≥‡∏ö‡∏•
  const districtPattern = /(?:‡∏≠\.|‡∏≠‡∏≥‡πÄ‡∏†‡∏≠|‡∏ï‡∏≥‡∏ö‡∏•|‡∏ï\.)([‡∏Å-‡πôa-zA-Z]+)/g;
  const districtMatches = [...text.matchAll(districtPattern)];
  districtMatches.forEach(match => {
    if (match[1] && match[1].length > 2) {
      foundLocations.push(`‡∏≠.${match[1]}`);
    }
  });
  
  return [...new Set(foundLocations)];
};

async function scrapeFacebookGroup() {
  const browser = await puppeteer.launch({ 
    headless: false, 
    args: [
      '--no-sandbox',
      '--disable-setuid-sandbox',
      '--disable-blink-features=AutomationControlled',
      '--disable-web-security',
      '--disable-features=IsolateOrigins,site-per-process',
      '--disable-dev-shm-usage'
    ],
    ignoreDefaultArgs: ['--enable-automation'],
    executablePath: undefined
  });

  try {
    const page = await browser.newPage();
    
    await page.evaluateOnNewDocument(() => {
      Object.defineProperty(navigator, 'webdriver', {
        get: () => false,
      });

      window.chrome = {
        runtime: {},
      };

      const originalQuery = window.navigator.permissions.query;
      window.navigator.permissions.query = (parameters) => (
        parameters.name === 'notifications' ?
          Promise.resolve({ state: Notification.permission }) :
          originalQuery(parameters)
      );

      Object.defineProperty(navigator, 'plugins', {
        get: () => [1, 2, 3, 4, 5],
      });

      Object.defineProperty(navigator, 'languages', {
        get: () => ['th-TH', 'th', 'en-US', 'en'],
      });
    });
    
    const userAgents = [
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/120.0.0.0 Safari/537.36',
      'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/119.0.0.0 Safari/537.36'
    ];
    await page.setUserAgent(userAgents[Math.floor(Math.random() * userAgents.length)]);
    
    const viewports = [
      { width: 1920, height: 1080 },
      { width: 1366, height: 768 },
      { width: 1440, height: 900 }
    ];
    await page.setViewport(viewports[Math.floor(Math.random() * viewports.length)]);

    await page.setExtraHTTPHeaders({
      'Accept-Language': 'th-TH,th;q=0.9,en-US;q=0.8,en;q=0.7',
      'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8',
      'Accept-Encoding': 'gzip, deflate, br',
      'Connection': 'keep-alive',
      'Upgrade-Insecure-Requests': '1'
    });

    console.log('üîê ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö Facebook...');
    await page.goto('https://www.facebook.com/', { waitUntil: 'networkidle2' });
    
    await randomMouseMovement(page);
    await randomDelay(2000, 3000);

    // *** ‡πÉ‡∏™‡πà Email ‡πÅ‡∏•‡∏∞ Password ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ***
    const EMAIL = 'test.face112@gmail.com';
    const PASSWORD = 'passW@rd';
    
    await page.waitForSelector('#email', { timeout: 10000 });
    await randomMouseMovement(page);
    await page.click('#email');
    await randomDelay(500, 1000);
    
    for (const char of EMAIL) {
      await page.keyboard.type(char, { delay: Math.random() * 150 + 50 });
    }
    
    await randomDelay(300, 700);
    await page.click('#pass');
    await randomDelay(500, 1000);
    
    for (const char of PASSWORD) {
      await page.keyboard.type(char, { delay: Math.random() * 150 + 50 });
    }
    
    await randomDelay(500, 1500);
    await randomMouseMovement(page);
    await page.click('button[name="login"]');
    
    console.log('‚è≥ ‡∏£‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏£‡∏∞‡∏ö‡∏ö...');
    await page.waitForNavigation({ waitUntil: 'networkidle2', timeout: 30000 });
    await randomDelay(3000, 5000);
    
    await randomMouseMovement(page);
    await page.evaluate(() => window.scrollBy(0, Math.random() * 200 + 100));

    // *** ‡πÉ‡∏™‡πà URL ‡∏Ç‡∏≠‡∏á‡∏Å‡∏•‡∏∏‡πà‡∏° Facebook ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà ***
    const GROUP_URL = 'https://www.facebook.com/groups/YOUR_GROUP_ID/';
    
    console.log(`üì± ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà‡∏Å‡∏•‡∏∏‡πà‡∏°: ${GROUP_URL}`);
    await page.goto(GROUP_URL, { waitUntil: 'networkidle2', timeout: 30000 });
    await randomDelay(3000, 5000);
    await randomMouseMovement(page);

    const allPosts = [];
    const maxScrollTimes = 10; // ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô
    const maxNoNewPostsCount = 2;
    let noNewPostsCount = 0;
    let previousPostCount = 0;
    let previousScrollHeight = 0;

    console.log('üìú ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå...');
    
    for (let i = 0; i < maxScrollTimes; i++) {
      console.log(`   ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà ${i + 1}/${maxScrollTimes}`);
      
      await randomMouseMovement(page);
      await randomDelay(1000, 2000);
      
      const currentScrollHeight = await page.evaluate(() => document.body.scrollHeight);
      
      // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
      const posts = await page.evaluate(() => {
        const postElements = document.querySelectorAll('[role="article"]');
        const postsData = [];

        postElements.forEach((post, index) => {
          try {
            // ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÉ‡∏ô‡πÇ‡∏û‡∏™‡∏ï‡πå
            let text = '';
            const textSelectors = [
              '[data-ad-comet-preview="message"]',
              '[data-ad-preview="message"]',
              'div[dir="auto"][style*="text-align"]',
              '[data-ad-rendering-role="message"]',
              '.x193iq5w.xeuugli',
              '[data-ad-comet-preview="message"] span',
              'div[data-ad-comet-preview="message"] div'
            ];
            
            for (const selector of textSelectors) {
              const elements = post.querySelectorAll(selector);
              if (elements.length > 0) {
                // ‡∏£‡∏ß‡∏°‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ó‡∏∏‡∏Å element
                const textArray = Array.from(elements).map(el => el.innerText.trim()).filter(t => t.length > 0);
                if (textArray.length > 0) {
                  text = textArray.join(' ');
                  break;
                }
              }
            }

            // ‡∏ñ‡πâ‡∏≤‡∏¢‡∏±‡∏á‡πÑ‡∏°‡πà‡∏°‡∏µ text ‡πÉ‡∏´‡πâ‡∏•‡∏≠‡∏á‡∏î‡∏∂‡∏á‡∏à‡∏≤‡∏Å innerText ‡∏Ç‡∏≠‡∏á post ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
            if (!text || text.length < 10) {
              const allText = post.innerText;
              if (allText && allText.length > 10) {
                text = allText;
              }
            }

            // ‡∏î‡∏∂‡∏á‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå
            let author = 'Unknown';
            const authorSelectors = [
              'a[role="link"] span',
              'h4 a span',
              'strong a span',
              'a[href*="/user/"] span',
              'a[href*="/profile.php"] span',
              '[data-ad-rendering-role="profile_name"]',
              '.x1i10hfl.xjbqb8w span',
              'h3 span',
              'h4 span'
            ];
            
            for (const selector of authorSelectors) {
              const elements = post.querySelectorAll(selector);
              if (elements.length > 0) {
                for (const el of elements) {
                  const name = el.innerText.trim();
                  if (name && name.length > 1 && !name.includes('‚Ä¢') && 
                      !name.includes('‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á') && !name.includes('‡∏ô‡∏≤‡∏ó‡∏µ') &&
                      !name.includes('‡∏ß‡∏±‡∏ô') && !name.includes('h') && !name.includes('m')) {
                    author = name;
                    break;
                  }
                }
                if (author !== 'Unknown') break;
              }
            }

            if (author === 'Unknown') {
              const linkWithAria = post.querySelector('a[aria-label]');
              if (linkWithAria) {
                const ariaLabel = linkWithAria.getAttribute('aria-label');
                if (ariaLabel && !ariaLabel.includes('‡πÄ‡∏°‡∏ô‡∏π') && !ariaLabel.includes('‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏∑‡∏≠‡∏Å')) {
                  author = ariaLabel;
                }
              }
            }

            // ‡∏î‡∏∂‡∏á Facebook Profile Link
            let authorProfileLink = '';
            const profileLinkSelectors = [
              'a[href*="/user/"]',
              'a[href*="/profile.php"]',
              'h4 a',
              'strong a'
            ];
            
            for (const selector of profileLinkSelectors) {
              const linkEl = post.querySelector(selector);
              if (linkEl && linkEl.href && (linkEl.href.includes('/user/') || linkEl.href.includes('/profile.php'))) {
                authorProfileLink = linkEl.href.split('?')[0];
                break;
              }
            }

            // ‡∏î‡∏∂‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡πÇ‡∏û‡∏™‡∏ï‡πå
            let postLink = '';
            const linkSelectors = [
              'a[href*="/posts/"]',
              'a[href*="/permalink/"]',
              'a[href*="/groups/"][href*="/posts/"]'
            ];
            
            for (const selector of linkSelectors) {
              const linkElement = post.querySelector(selector);
              if (linkElement) {
                postLink = linkElement.href;
                break;
              }
            }

            // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
            let imageUrl = '';
            const imgElement = post.querySelector('img[src*="scontent"]');
            if (imgElement) {
              imageUrl = imgElement.src;
            }

            // ‡∏î‡∏∂‡∏á‡πÄ‡∏ß‡∏•‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå
            let postTime = '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏';
            const timeElements = post.querySelectorAll('span');
            for (const el of timeElements) {
              const timeText = el.innerText;
              if (timeText && (timeText.includes('‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á') || timeText.includes('‡∏ô‡∏≤‡∏ó‡∏µ') || 
                  timeText.includes('‡∏ß‡∏±‡∏ô') || timeText.includes('‡∏õ‡∏µ') || timeText.includes('‡∏™‡∏±‡∏õ‡∏î‡∏≤‡∏´‡πå') ||
                  timeText.includes('h') || timeText.includes('m') || timeText.includes('d') ||
                  timeText.includes('w') || timeText.includes('y'))) {
                postTime = timeText;
                break;
              }
            }

            // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô reactions
            let reactions = 0;
            const reactionElements = post.querySelectorAll('[aria-label*="‡∏Ñ‡∏ô"], [aria-label*="people"]');
            for (const el of reactionElements) {
              const ariaLabel = el.getAttribute('aria-label');
              const match = ariaLabel.match(/(\d+)/);
              if (match) {
                reactions = parseInt(match[1]);
                break;
              }
            }

            // ‡∏î‡∏∂‡∏á‡∏à‡∏≥‡∏ô‡∏ß‡∏ô comments
            let comments = 0;
            const commentElements = post.querySelectorAll('[aria-label*="‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡πÄ‡∏´‡πá‡∏ô"], [aria-label*="comment"]');
            for (const el of commentElements) {
              const text = el.innerText || el.getAttribute('aria-label');
              const match = text.match(/(\d+)/);
              if (match) {
                comments = parseInt(match[1]);
                break;
              }
            }

            // ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 10 ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
            if (text.length > 10) {
              postsData.push({
                author,
                authorProfileLink,
                text,
                postLink,
                imageUrl,
                postTime,
                engagement: {
                  reactions: reactions,
                  comments: comments
                },
                rawTimestamp: new Date().toISOString()
              });
            }
          } catch (error) {
            console.error('Error parsing post:', error);
          }
        });

        return postsData;
      });

      // ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡πâ‡∏ß‡∏¢ Node.js (‡∏ù‡∏±‡πà‡∏á server)
      posts.forEach(post => {
        // ‡πÉ‡∏ä‡πâ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á‡πÅ‡∏•‡πâ‡∏ß
        const phones = extractPhoneNumbers(post.text);
        const lineIds = extractLineIds(post.text);
        const prices = extractPrices(post.text);
        const beerBrands = extractBeerBrands(post.text);
        const locations = extractLocations(post.text);
        
        // ‡∏î‡∏∂‡∏á‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á
        const deliveryMethods = [];
        const lowerText = post.text.toLowerCase();
        if (lowerText.includes('‡∏à‡∏±‡∏î‡∏™‡πà‡∏á') || lowerText.includes('‡∏™‡πà‡∏á‡πÑ‡∏î‡πâ') || 
            lowerText.includes('‡∏°‡∏µ‡∏™‡πà‡∏á') || lowerText.includes('‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á') || 
            lowerText.includes('‡∏™‡πà‡∏á‡∏ü‡∏£‡∏µ') || lowerText.includes('delivery')) {
          deliveryMethods.push('‡∏à‡∏±‡∏î‡∏™‡πà‡∏á');
        }
        if (lowerText.includes('‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö') || lowerText.includes('‡∏£‡∏±‡∏ö‡πÄ‡∏≠‡∏á') || 
            lowerText.includes('‡∏°‡∏≤‡∏£‡∏±‡∏ö') || lowerText.includes('pickup')) {
          deliveryMethods.push('‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö');
        }
        
        // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏™‡∏°‡∏ö‡∏π‡∏£‡∏ì‡πå
        const processedPost = {
          ...post,
          contact: {
            phones: phones,
            lineIds: lineIds,
            hasContact: phones.length > 0 || lineIds.length > 0
          },
          productInfo: {
            prices: prices,
            beerBrands: beerBrands,
            locations: locations,
            deliveryMethods: deliveryMethods
          },
          timestamp: new Date().toISOString()
        };
        
        // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ô‡∏µ‡πâ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        const exists = allPosts.some(p => 
          p.text === processedPost.text && p.author === processedPost.author
        );
        
        if (!exists) {
          allPosts.push(processedPost);
          
          // ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡πÑ‡∏î‡πâ
          console.log(`   ‚úì ${processedPost.author.substring(0, 25)}...`);
          if (processedPost.contact.hasContact) {
            console.log(`     üìû ${phones.join(', ')} | üí¨ ${lineIds.join(', ')}`);
          }
          if (prices.length > 0) {
            console.log(`     üí∞ ${prices.join(', ')} ‡∏ö‡∏≤‡∏ó`);
          }
          if (beerBrands.length > 0) {
            console.log(`     üç∫ ${beerBrands.join(', ')}`);
          }
          if (locations.length > 0) {
            console.log(`     üìç ${locations.join(', ')}`);
          }
        }
      });

      // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
      if (allPosts.length === previousPostCount) {
        noNewPostsCount++;
        console.log(`   ‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà (${noNewPostsCount}/${maxNoNewPostsCount})`);
      } else {
        noNewPostsCount = 0;
        console.log(`   ‚úÖ ‡∏£‡∏ß‡∏° ${allPosts.length} ‡πÇ‡∏û‡∏™‡∏ï‡πå`);
      }

      previousPostCount = allPosts.length;

      if (noNewPostsCount >= maxNoNewPostsCount) {
        console.log('   üõë ‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏•‡πâ‡∏ß - ‡∏´‡∏¢‡∏∏‡∏î‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô');
        break;
      }

      if (previousScrollHeight > 0 && currentScrollHeight === previousScrollHeight) {
        console.log('   üõë ‡∏ñ‡∏∂‡∏á‡∏à‡∏∏‡∏î‡∏™‡∏¥‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏•‡πâ‡∏ß');
        break;
      }

      previousScrollHeight = currentScrollHeight;

      await humanScroll(page);
      await randomDelay(3000, 6000);
      
      if (Math.random() > 0.7) {
        await page.evaluate(() => window.scrollBy(0, -Math.random() * 100));
        await randomDelay(1000, 2000);
      }

      const hasEndMessage = await page.evaluate(() => {
        const bodyText = document.body.innerText.toLowerCase();
        return bodyText.includes('‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°') || 
               bodyText.includes('no more posts') ||
               bodyText.includes('‡∏Ñ‡∏∏‡∏ì‡∏î‡∏π‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß');
      });

      if (hasEndMessage) {
        console.log('   üõë ‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏à‡πâ‡∏á‡∏ß‡πà‡∏≤‡πÑ‡∏°‡πà‡∏°‡∏µ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÅ‡∏•‡πâ‡∏ß');
        break;
      }
    }

    console.log(`\n‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏î‡πâ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${allPosts.length} ‡πÇ‡∏û‡∏™‡∏ï‡πå`);

    // ‡∏Å‡∏£‡∏≠‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå
    const beerKeywords = [
      '‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå', 'beer', '‡∏Ç‡∏≤‡∏¢‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå', '‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå‡∏ô‡∏≥‡πÄ‡∏Ç‡πâ‡∏≤', 'craft beer',
      '‡∏™‡∏¥‡∏á‡∏´‡πå', '‡∏ä‡πâ‡∏≤‡∏á', '‡∏•‡∏µ‡πÇ‡∏≠', 'heineken', 'corona', '‡∏´‡∏°‡∏µ‡∏Ç‡∏≤‡∏ß',
      '‡∏™‡πà‡∏á‡∏î‡πà‡∏ß‡∏ô', '‡∏à‡∏±‡∏î‡∏™‡πà‡∏á', '‡∏°‡∏µ‡∏™‡πà‡∏á', '‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏™‡πà‡∏á', '‡∏£‡∏≤‡∏Ñ‡∏≤', '‡∏ö‡∏≤‡∏ó',
      '‡∏™‡∏±‡πà‡∏á‡πÑ‡∏î‡πâ', '‡∏™‡∏ô‡πÉ‡∏à', 'inbox', '‡πÑ‡∏•‡∏ô‡πå', '‡∏ñ‡∏±‡∏á', '‡∏•‡∏±‡∏á', '‡∏Ç‡∏ß‡∏î'
    ];

    const beerPosts = allPosts.filter(post => {
      const lowerText = post.text.toLowerCase();
      return beerKeywords.some(keyword => lowerText.includes(keyword.toLowerCase()));
    });

    console.log(`üç∫ ‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå ${beerPosts.length} ‡πÇ‡∏û‡∏™‡∏ï‡πå`);

    // ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    const postsWithContact = beerPosts.filter(p => p.contact.hasContact).length;
    const postsWithPrice = beerPosts.filter(p => p.productInfo.prices.length > 0).length;
    const postsWithBrand = beerPosts.filter(p => p.productInfo.beerBrands.length > 0).length;
    const postsWithLocation = beerPosts.filter(p => p.productInfo.locations.length > 0).length;

    // ‡∏™‡∏£‡πâ‡∏≤‡∏á object ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå
    const results = {
      scrapedAt: new Date().toISOString(),
      groupUrl: GROUP_URL,
      totalPosts: allPosts.length,
      beerRelatedPosts: beerPosts.length,
      statistics: {
        withContact: postsWithContact,
        withPrice: postsWithPrice,
        withBrand: postsWithBrand,
        withLocation: postsWithLocation,
        completenessRate: Math.round((postsWithContact / beerPosts.length) * 100) || 0
      },
      posts: beerPosts
    };

    // ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå
    const filename = `facebook_beer_posts_${new Date().getTime()}.json`;
    fs.writeFileSync(filename, JSON.stringify(results, null, 2), 'utf-8');
    console.log(`üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á‡πÑ‡∏ü‡∏•‡πå: ${filename}`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥
    console.log('\nüìä ‡∏™‡∏ñ‡∏¥‡∏ï‡∏¥‡∏Å‡∏≤‡∏£‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:');
    console.log(`   - ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: ${allPosts.length}`);
    console.log(`   - ‡πÇ‡∏û‡∏™‡∏ï‡πå‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡πÄ‡∏ö‡∏µ‡∏¢‡∏£‡πå: ${beerPosts.length}`);
    console.log(`   - ‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠: ${postsWithContact}/${beerPosts.length} (${Math.round((postsWithContact/beerPosts.length)*100)}%)`);
    console.log(`   - ‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤: ${postsWithPrice}/${beerPosts.length} (${Math.round((postsWithPrice/beerPosts.length)*100)}%)`);
    console.log(`   - ‡∏°‡∏µ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠: ${postsWithBrand}/${beerPosts.length} (${Math.round((postsWithBrand/beerPosts.length)*100)}%)`);
    console.log(`   - ‡∏°‡∏µ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${postsWithLocation}/${beerPosts.length} (${Math.round((postsWithLocation/beerPosts.length)*100)}%)`);

    // ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö
    const completePosts = beerPosts.filter(p => 
      p.contact.hasContact && 
      p.productInfo.prices.length > 0 && 
      p.productInfo.locations.length > 0
    );

    if (completePosts.length > 0) {
      console.log(`\nüéØ ‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô ${completePosts.length} ‡πÇ‡∏û‡∏™‡∏ï‡πå:`);
      completePosts.slice(0, 5).forEach((post, index) => {
        console.log(`\n--- ‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà ${index + 1} ---`);
        console.log(`‡∏ú‡∏π‡πâ‡πÇ‡∏û‡∏™‡∏ï‡πå: ${post.author}`);
        console.log(`‡πÄ‡∏ß‡∏•‡∏≤: ${post.postTime}`);
        console.log(`‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°: ${post.text.substring(0, 80)}...`);
        console.log(`üìû ‡πÄ‡∏ö‡∏≠‡∏£‡πå: ${post.contact.phones.join(', ')}`);
        if (post.contact.lineIds.length > 0) {
          console.log(`üí¨ LINE: ${post.contact.lineIds.join(', ')}`);
        }
        console.log(`üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤: ${post.productInfo.prices.join(', ')} ‡∏ö‡∏≤‡∏ó`);
        if (post.productInfo.beerBrands.length > 0) {
          console.log(`üç∫ ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠: ${post.productInfo.beerBrands.join(', ')}`);
        }
        console.log(`üìç ‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà: ${post.productInfo.locations.join(', ')}`);
        console.log(`üîó ${post.postLink}`);
      });
    }

    // ‡πÅ‡∏™‡∏î‡∏á‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)
    const incompletePosts = beerPosts.filter(p => !p.contact.hasContact && p.productInfo.prices.length > 0);
    if (incompletePosts.length > 0) {
      console.log(`\n‚ö†Ô∏è  ‡∏û‡∏ö‡πÇ‡∏û‡∏™‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏Ç‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠ ${incompletePosts.length} ‡πÇ‡∏û‡∏™‡∏ï‡πå (‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°)`);
    }

  } catch (error) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', error.message);
    console.error(error.stack);
  } finally {
    await browser.close();
    console.log('\n‚úÖ ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô');
  }
}

// ‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
scrapeFacebookGroup().catch(console.error);